#! /bin/sh

# This is an implementation of a start-script for Vuurmuur.
#
# (c) 2004 Victor Julien, released under GPL.
# Adapted for Suse by Aleksandr Shubnik <alshu@tut.by>

# SuSE edition
#
# insserv /etc/init.d/vuurmuur
# chkconfig: 345 91 9
# Description: Vuurmuur is a firewall.
#

### BEGIN INIT INFO
# Provides: vuurmuur
# Required-Start: SuSEfirewall2_init $network $local_fs
# Should-Start: $ALL
# Required-Stop: $local_fs
# X-UnitedLinux-Should-Stop:
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Short-Description: SuSEfirewall2 phase 2
# Description:    Vuurmuur firewall
### END INIT INFO


DAEMON="Vuurmuur daemon"
DAEMON_BIN=/usr/bin/vuurmuur
DAEMON_CONF=/etc/vuurmuur/config.conf
DAEMON_PIDFILE=/var/run/vuurmuur.pid
DAEMON_OPT="-D"
SUPPORTS_HUP="yes"
# "yes" if exist next value in clamd.conf
#       PidFile /var/run/clamd.pid

DAEMONLOG="Vuurmuur_log daemon"
DAEMONLOG_BIN=/usr/bin/vuurmuur_log
DAEMONLOG_PIDFILE=/var/run/vuurmuur_log.pid
DAEMONLOG_OPT=""

# space separated list of modules to load on start, or 'none' if none ;-)
MODULES_TO_LOAD="ip_tables iptable_filter iptable_mangle iptable_nat ip_conntrack ipt_state ip_conntrack_ftp ip_nat_ftp ip_queue"
#MODULES_TO_LOAD="none"

PATH=/bin:/usr/bin:/sbin:/usr/sbin

test -x $DAEMON_BIN || exit 5

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

# remove empty pid files to avoid disturbing warnings by checkproc/killproc
# (these can occur if dhcpd does not start correctly)

test -e $DAEMON_PIDFILE && ! test -s $DAEMON_PIDFILE && rm $DAEMON_PIDFILE
test -f /etc/sysconfig/vuurmuur && . /etc/sysconfig/vuurmuur

case "$1" in
        start)
		echo -n -e "\tLoading modules:\t"
		if [ "$MODULES_TO_LOAD" == "none" ]; then
		    echo "disabled."
		else
		    # load the modules
		    for MODULE in `echo $MODULES_TO_LOAD`; do
			modprobe $MODULE
			echo -n "$MODULE "
		    done
		    echo ""
		fi

		echo -n "Starting $DAEMON "
    		if test ! -f ${DAEMON_CONF}; then
	            echo -n >&2 "Configuration file, ${DAEMON_CONF} does not exist. "
		    rc_status -s
	    	    exit 6
		fi
		checkproc -p ${DAEMON_PIDFILE} ${DAEMON_BIN}
		case $? in
	    	    0) echo -n "- Warning: daemon already running. " ;;
		    1) echo -n "- Warning: ${DAEMON_PIDFILE} exists. " ;;
		esac
		startproc -p ${DAEMON_PIDFILE} ${DAEMON_BIN} ${DAEMON_OPT}
		rc_status -v

		DAEMON=${DAEMONLOG}
		DAEMON_BIN=${DAEMONLOG_BIN}
		DAEMON_PIDFILE=${DAEMONLOG_PIDFILE}
		DAEMON_OPT=${DAEMONLOG_OPT}
		echo -n "Starting $DAEMON "
		checkproc -p ${DAEMON_PIDFILE} ${DAEMON_BIN}
		case $? in
	    	    0) echo -n "- Warning: daemon already running. " ;;
		    1) echo -n "- Warning: ${DAEMON_PIDFILE} exists. " ;;
		esac
		startproc -p ${DAEMON_PIDFILE} ${DAEMON_BIN} ${DAEMON_OPT}
		rc_status -v
		;;
	stop)
		echo -n "Shutting down $DAEMON "
		checkproc -p ${DAEMON_PIDFILE} ${DAEMON_BIN} || \
		echo -n " Warning: daemon not running. "
		killproc -p ${DAEMON_PIDFILE} -t 10 ${DAEMON_BIN}
		rc_status -v

		DAEMON=${DAEMONLOG}
		DAEMON_BIN=${DAEMONLOG_BIN}
		DAEMON_PIDFILE=${DAEMONLOG_PIDFILE}
		DAEMON_OPT=${DAEMONLOG_OPT}
		echo -n "Shutting down $DAEMON "
		checkproc -p ${DAEMON_PIDFILE} ${DAEMON_BIN} || \
		echo -n " Warning: daemon not running. "
		killproc -p ${DAEMON_PIDFILE} -t 10 ${DAEMON_BIN}
		rc_status -v
		;;
	try-restart|condrestart)
		if test "$1" = "condrestart"; then
			echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
		fi
		$0 status
		if test $? = 0; then
			$0 restart
		else 
			rc_reset
		fi
		rc_status
		;;
	restart)
		$0 stop
		$0 start
		rc_status
		;;
	force-reload|reload)
    		if test "$SUPPORTS_HUP" = "yes"; then
		    echo -n "Reload service $DAEMON "
		    checkproc -p ${DAEMON_PIDFILE} ${DAEMON_BIN} && \
		    touch ${DAEMON_PIDFILE} || \
		    echo -n >&2 " Warning: daemon not running. "
		    killproc -p ${DAEMON_PIDFILE} -HUP ${DAEMON_BIN}
		    rc_status -v
		else
		    $0 stop  &&  sleep 3  &&  $0 start
		    rc_status
		fi
		;;
	status)
		echo -n "Checking for $DAEMON "
		checkproc -p ${DAEMON_PIDFILE} ${DAEMON_BIN}
		rc_status -v

		DAEMON=${DAEMONLOG}
		DAEMON_BIN=${DAEMONLOG_BIN}
		DAEMON_PIDFILE=${DAEMONLOG_PIDFILE}
		DAEMON_OPT=${DAEMONLOG_OPT}
		echo -n "Checking for $DAEMON "
		checkproc -p ${DAEMON_PIDFILE} ${DAEMON_BIN}
		rc_status -v
		;;
	probe)
		test ${DAEMON_CONF} -nt ${DAEMON_PIDFILE} && echo reload
		;;
	*)
		echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
		exit 1
		;;
esac
rc_exit
